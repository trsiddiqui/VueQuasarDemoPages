<template>
  <div>
    <q-ajax-bar ref="bar" :position="ajaxBarDirectionReverse" :reverse='false' :size="ajaxBarSize"></q-ajax-bar>
      <div class="card">
        <div class="list">
          <q-list inset-separator>
            <q-collapsible icon="folder" label="Search Orders" sublabel="Expand to search by Order details" group="searchBy" @open="searchByOrders">
              <div class="card-content">
                <div class="flex row">
                  <div class="col-2">
                    <q-search v-model="reqId" placeholder="Order ID"></q-search>
                  </div>
                  <div class="col-2">
                    <q-input v-model="form.mrn" placeholder="Patient MRN"></q-input>
                  </div>
                  <div class="col-2">
                    <q-datetime v-model="pmsRequisitionDate" placeholder="Order Date"></q-datetime>
                  </div>
                  <div class="col-2">
                    <q-datetime v-model="received" placeholder="TBD Date" tooltip="To Be Done By Date">
                    </q-datetime>
                  </div>
                  <div class="col-2" style="margin-top: -17px;">
                    <q-select
                      multiple=""
                      chips=""
                      color="blue"
                      float-label="Type"
                      v-model="selectedOrderTypes"
                      :options="orderTypes"
                    />
                  </div>
                </div>
                <div class="flex row">
                  <div class="col-4">
                    <q-btn @click="clear">
                      <q-icon name="search"  />Search
                    </q-btn>
                    <q-btn @click="findPatients">
                      <q-icon name="search"  />Search
                    </q-btn>
                  </div>
                </div>
                <br />
              </div>
            </q-collapsible>
            <q-collapsible icon="perm_identity" label="Search Patients" sublabel="Expand to search by Patient details" opened group="searchBy" id="patientSearch">
              <div class="card-content">
                <div class="flex row">
                  <div class="col-2">
                    <q-search v-model="form.name" placeholder="Name *" :error="$v.form.name.$invalid"></q-search>
                  </div>
                  <div class="col-3">
                    <q-datetime v-model="form.dob" placeholder="DOB (select)" :error="$v.form.dob.$invalid" :max="form.today" :min="form.minDate" v-if="dateInput"></q-datetime>
                    <q-input v-model="form.dob" placeholder="DOB (yyyy-mm-dd)" :error="$v.form.dob.$invalid" v-if="!dateInput"></q-input>
                    <q-toggle
                      class="floatover"
                      v-model="dateInput"
                      checked-icon="date_range"
                      unchecked-icon="keyboard"
                      color="light">
                    </q-toggle>
                  </div>
                  <div class="col-2">
                    <q-input v-model="form.phone" placeholder="Phone"></q-input>
                  </div>
                  <div class="col-2">
                    <q-input v-model="form.ssn" placeholder="SSN"></q-input>
                  </div>
                  <div class="col-3">
                    <q-input v-model="form.mrn" placeholder="MRN"></q-input>
                  </div>
                </div>
                <div class="flex row">
                  <div class="col-4">
                    <q-btn @click="clear(form)">
                      <q-icon name="search"  />Clear
                    </q-btn>
                    <q-btn @click="findPatients">
                      <q-icon name="search"  />Search
                    </q-btn>
                  </div>
                </div>
              </div>
              <div id="tblPatients" v-if="patients.length">
                <q-data-table
                  :data="patients"
                  :config="patientConfigs"
                  :columns="patientColumns"
                  @selection="selectPatient"
                  highlightSelected="">
                </q-data-table>
              </div>
            </q-collapsible>
          </q-list>
          <br />
          <div class="card-content" v-if="selectedPatientData.firstName">
            <q-list inset-separator="">
              <q-collapsible icon="perm_identity" :label="selectedPatientData.markup" sublabel="Expand to see more details of the selected patient" group="searchBy">
                <q-card v-if="selectedPatientData.firstName">
                  <q-card-title>
                    <div slot="subtitle">
                      Insurance ID
                      <br />
                      Davis Jordan
                      <br />
                      Spouse
                    </div>
                    <div slot="right" class="row items-right">
                      {{ selectedPatientData.phoneNumber ? selectedPatientData.phoneNumber + ' (p)' : 'N/A (p)' }}
                    </div>
                    <div slot="right" class="row items-right">
                      {{ selectedPatientData.mobileNumber ? selectedPatientData.mobileNumber + ' (m)' : 'N/A (m)' }}
                    </div>
                    <div slot="right" class="row items-right">
                      {{ ( !selectedPatientData.stLine1 && !selectedPatientData.city && !selectedPatientData.state ) ? 'Address N/A' : ((selectedPatientData.stLine1 ? selectedPatientData.stLine1 + ', ' : '') + (selectedPatientData.city ? selectedPatientData.city + ', ' : '') + (selectedPatientData.state ? selectedPatientData.state : '')) }}
                    </div>
                  </q-card-title>
                  <q-card-separator />
                </q-card>
              </q-collapsible>
            </q-list>
            
            <q-card v-if="show">
              <q-card-title>
                 <i class="material-icons text-positive">person</i> Insurance ID
                <div slot="subtitle">
                  <i class="material-icons text-positive" style="font-size: 18px">cake</i> {{ selectedPatientData.birthdate ? selectedPatientData.birthdate : 'N/A' }}
                  <br />
                  <i class="material-icons text-positive" style="font-size: 18px">home</i> {{ selectedPatientData.stLine1 ? selectedPatientData.stLine1 : 'address N/A' + ', ' +  selectedPatientData.city ? selectedPatientData.city : 'city N/A' + ', ' + selectedPatientData.state ? selectedPatientData.state : 'state N/A' + '. ' + (selectedPatientData.zipcode ? selectedPatientData.zipcode : 'zip code N/A') }}
                  <br />
                  <i class="material-icons text-positive" style="font-size: 18px">phone</i> {{ selectedPatientData.phoneNumber ? selectedPatientData.phoneNumber : 'phone N/A'}}
                </div>
                <div slot="right" class="row items-center">
                  <i class="material-icons text-positive" style="font-size: 18px">credit_card</i> {{ selectedPatientData.mrn ? selectedPatientData.mrn : 'mrn N/A' }}
                </div>
                <div slot="right" class="row items-center">
                  <i class="material-icons text-positive" style="font-size: 18px">card_membership</i> {{ selectedPatientData.insurancePlanId ? selectedPatientData.insurancePlanId : 'ins plan ID N/A'}}
                </div>
                <div slot="right" class="row items-center">
                  <i class="material-icons text-positive" style="font-size: 18px">card_membership</i> Guarantor N/A
                </div>
              </q-card-title>
              <q-card-separator />
            </q-card>
          </div>
          <br />
          <q-card v-if="requisitions.length">
            <div>
              <div class="row">
                <div class="q-data-table-title table-custom-title col-11">Requisitions for {{ selectedPatientData.fullName }}</div>
                <div class="col-1 customPaddingForDiv">
                  <q-toggle
                    v-model="outstanding"
                    checked-icon="hourglass_empty"
                    unchecked-icon="hourglass_empty"
                    color="grey-4"
                  />
                  <q-toggle
                    v-model="resulted"
                    checked-icon="done"
                    unchecked-icon="done"
                    color="grey-4"
                  />
                </div>
              </div>
              <q-list separator>
                <q-collapsible :label="req.label" v-for="(req, index) in requisitions" :key="index" class="collapsible-no-padding" @open="openRequisition('Requisition' + req.reqId)" @close="closeRequisition('Requisition' + req.reqId)" :id='"Requisition" + req.reqId'>
                  <q-list>
                    <q-item link>
                      <q-item-main>
                        <q-data-table
                          :data="req.ordersList"
                          :config="orderConfigs"
                          :columns="orderColumns"
                          @selection="selectOrders">
                        </q-data-table>
                        <div class="card-content customlegend">
                          <i class="material-icons text-positive" style="font-size: 22px">hourglass_empty</i> <span>Outstanding</span> : <i class="material-icons text-positive" style="font-size: 22px">done</i> <span>Resulted</span>
                        </div>
                      </q-item-main>
                    </q-item>
                  </q-list>
                </q-collapsible>
              </q-list>
              <div class="card-content customlegend">
                <i class="material-icons text-positive" style="font-size: 22px">arrow_downward</i><span>Order Date</span>&nbsp;<i class="material-icons text-positive" style="font-size: 22px">arrow_upward</i><span>To be done by Date</span>&nbsp;<i class="fa fa-user-md text-positive" style="font-size: 18px"></i><span>Ordering Provider</span>&nbsp;<i class="fa fa-building-o" style="font-size: 24px"></i><span>Lab</span>&nbsp;<i class="fa fa-hospital-o" style="font-size: 24px"></i><span>Rad</span>&nbsp;<i class="fa fa-stethoscope text-positive" style="font-size: 18px"></i>Tests in Requisition
              </div>
            </div>
          </q-card>
          <div class="layout-view" v-if="show">    
            <div class="stickToLeft" v-bind:style="{ width: reqWidth, padding: '10px' }">
              <div class="card-content" id="tblRequisitions">
                <div class="q-data-table-title table-custom-title">Requisitions</div>
                <q-data-table
                  :data="requisitions"
                  :config="requisitionConfigs"
                  :columns="requistionColumns"
                  @selection="selectRequisitions">
                </q-data-table>
              </div>
            </div>
            <div class="stickToRight" style="width: 70%; padding: 10px;">
              <div class="card-content" id="tblOrders">
                <div class="row">
                  <div class="q-data-table-title table-custom-title col-10">Orders</div>
                  <div class="col-2">
                    <q-toggle
                      v-model="outstanding"
                      checked-icon="hourglass_empty"
                      unchecked-icon="hourglass_empty"
                      color="#a1dea3"
                    />
                    <q-toggle
                      v-model="resulted"
                      checked-icon="done"
                      unchecked-icon="done"
                      color="#a1dea3"
                    />
                  </div>
                </div>
                <q-data-table
                  :data="orders"
                  :config="orderConfigs"
                  :columns="orderColumns"
                  @selection="selectOrders">
                </q-data-table>
                <div class="card-content customlegend">
                  <i class="material-icons text-positive" style="font-size: 22px">hourglass_empty</i> <span>Outstanding</span> : <i class="material-icons text-positive" style="font-size: 22px">done</i> <span>Resulted</span>
                </div>
                <div class="flex">
                    <q-btn @click="release()">
                      <q-icon name="map"/>Release
                    </q-btn>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</template>

<script>
import {
  Alert,
  QAlert,
  QLayout,
  QToolbar,
  QToolbarTitle,
  QBtn,
  QIcon,
  QList,
  QListHeader,
  QItem,
  QItemSide,
  QItemMain,
  QAjaxBar,
  QCollapsible,
  QSearch,
  QDatetime,
  QDataTable,
  QInput,
  QSelect,
  QTooltip,
  QCard,
  QCardTitle,
  QCardMain,
  QCardSeparator,
  QToggle,
  QItemTitle,
  QItemTile,
  Toast
} from 'quasar'
import jQuery from 'jquery'
import { required } from 'vuelidate/lib/validators'
export default {
  name: 'index',
  components: {
    QAlert,
    QLayout,
    QToolbar,
    QToolbarTitle,
    QBtn,
    QIcon,
    QList,
    QListHeader,
    QItem,
    QItemSide,
    QItemMain,
    QAjaxBar,
    QCollapsible,
    QSearch,
    QDatetime,
    QDataTable,
    QInput,
    QSelect,
    QTooltip,
    QCard,
    QCardTitle,
    QCardMain,
    QCardSeparator,
    QToggle,
    QItemTitle,
    QItemTile,
    jQuery,
    required
  },
  validations: {
    form: {
      name: {
        required
      },
      dob: {
        // required
      }
    }
  },
  data () {
    return {
      show: false,
      selectedOrderTypes: [],
      orderTypes: [
        {
          label: 'Lab',
          icon: 'unarchive',
          rightIcon: 'domain',
          value: 'lab'
        },
        {
          label: 'Rad',
          icon: 'local_hospital',
          rightIcon: 'local_hospital',
          value: 'rad'
        }
      ],
      dateInput: false,
      reqId: '',
      pmsRequisitionDate: '',
      received: '',
      orderType: '',
      ajaxBarSize: '8',
      ajaxBarDirectionReverse: 'bottom',
      reqWidth: '100%',
      patients: [],
      requisitions: [],
      orders: [],
      previouslySearchedUnfilteredOrders: [],
      outstanding: true,
      resulted: false,
      idSrcNosArray: [ 'MH' ],
      idRecNosArray: [ '713338' ],
      page: 1,
      form: {
        name: '',
        dob: '',
        ssn: '',
        phone: '',
        mrn: '',
        minDate: new Date().setFullYear('1920'),
        today: new Date()
      },
      patientColumns: [
        { label: 'Match Score', field: 'matchScore', width: '40px', sort (a, b) { return a > b } },
        { label: 'Last Name', field: 'lastName', width: '50px', sort (a, b) { return (a > b) - (a < b) } },
        { label: 'First Name', field: 'firstName', width: '50px', hidden: true, sort (a, b) { return (a > b) - (a < b) } },
        { label: 'Gender', field: 'gender', width: '40px', sort (a, b) { return (a > b) - (a < b) } },
        { label: 'Date of Birth', field: 'birthDate', width: '60px', sort (a, b) { return (new Date(a)) - (new Date(b)) } },
        { label: 'Address', field: 'stLine1', width: '70px' },
        { label: 'City', field: 'city', width: '50px', sort (a, b) { return (a > b) - (a < b) } },
        { label: 'State', field: 'state', width: '40px', sort (a, b) { return (a > b) - (a < b) } },
        { label: 'Phone', field: 'phoneNumber', width: '60px', sort (a, b) { return (a > b) - (a < b) } },
        { label: 'SSN', field: 'ssnIdNumber', width: '60px', sort (a, b) { return a > b } }
      ],
      requistionColumns: [
        { label: 'Req ID', field: 'requisitionID', width: '30px' },
        { label: 'Status', field: 'status', width: '50px' },
        { label: 'Ordering Provider', field: 'pmsProviderID', width: '70px' },
        { label: 'Order Date', field: 'pmsRequisitionDate', width: '40px', type: 'string', sort (a, b) { return (new Date(a)) - (new Date(b)) }, format (value, row) { return (new Date(value)).toLocaleDateString() } },
        { label: 'TBD Date', field: 'received', width: '40px', type: 'string', sort (a, b) { return (new Date(a)) - (new Date(b)) }, format (value, row) { return (new Date(value)).toLocaleDateString() } },
        { label: 'Type', field: 'orderDomain', width: '25px' },
        { label: 'Test Codes', field: 'testCodes', width: '100px' }
      ],
      orderColumns: [
        // { label: 'Req ID', field: 'requisitionID', width: '50px' },
        { label: 'Test Code', field: 'pmsTestCode', width: '140px', format (value, row) { return value + '<br /><span class="q-card-subtitle">' + row.pmsTestDescription + '</span>' } },
        { label: 'Release Date', field: 'received', width: '50px', sort (a, b) { return (new Date(a)) - (new Date(b)) }, format (value, row) { return (new Date(value)).toLocaleDateString() } },
        { label: 'Patient Acct #', field: 'patientAccountNumber', width: '60px' },
        { label: 'Order MRN', field: 'pmsOrderId', width: '50px' },
        {
          label: 'Status',
          field: 'orderStatus',
          width: '40px',
          format (val, row) {
            if (val === 'OUTSTANDING') {
              return '<i class="material-icons text-positive followingToolTip" title="Outstanding" style="font-size: 22px">hourglass_empty</i>'
            }
            else if (val === 'RETURNED') {
              return '<i class="material-icons text-positive followingToolTip" title="Released" style="font-size: 22px">done</i>'
            }
          }
        }
      ],
      patientConfigs: {
        rowHeight: '40px',
        columnPicker: true,
        pagination: {
          rowsPerPage: 3,
          options: [5, 10, 15, 30, 50, 500]
        },
        selection: 'single',
        messages: {
          noData: 'Please search with above filters to load patients.',
          noDataAfterFiltering: 'No results. Please refine your search terms.'
        },
        labels: {
          columns: 'Columns',
          allCols: 'All Cols',
          rows: 'Rows',
          selected: {
            singular: 'patient selected.'
          },
          clear: 'clear',
          search: 'Search',
          all: 'All'
        }
      },
      requisitionConfigs: {
        rowHeight: '56px',
        columnPicker: true,
        pagination: {
          rowsPerPage: 10,
          options: [5, 10, 15, 30, 50, 500]
        },
        selection: 'multiple',
        labels: {
          selected: {
            singular: 'requisition selected',
            plural: 'requisitions selected.'
          }
        }
      },
      orderConfigs: {
        rowHeight: '56px',
        columnPicker: true,
        selection: 'multiple',
        messages: {
          noData: 'No orders for the selected requisitions and filters.',
          noDataAfterFiltering: 'No results. Please refine your search terms.'
        },
        labels: {
          selected: {
            singular: 'order selected to be released',
            plural: 'orders selected to be released.'
          }
        }
      },
      selectedPatientData: {},
      selectedRequisitionDataArray: [],
      tempRequisition: {},
      selectedOrderDataArray: [],
      tempOrder: {},
      temp: ''
    }
  },
  computed: {
    patientUrl () {
      // return `https://localhost:8888/api/v1/mdm/searchForPatient?name=${this.name}&dob=${new Date(this.dob).toLocaleDateString()}&phone=${this.phone}&ssn=${this.ssn}`
      return `https://localhost:8888/api/v1/mdm/searchForPatient`
    },
    requisitionUrl () {
      // return `https://localhost:8888/api/v1/oqm/getRequisitionsByIDs?idSrcNos=${this.idSrcNosArray.join(',')}&idRecNos=${this.idRecNosArray.join(',')}`
      return `https://localhost:8888/api/v1/oqm/getRequisitionsByIDs`
    },
    orderUrl () {
      return `https://localhost:8888/api/v1/oqm/getTestsByIDs?patientId=1`
    },
    search () {
      return `https://localhost:8888/api/v1/mdm/searchForPatient?name=${this.name}&dob=${this.dob}&phone=${this.phone}&ssn=${this.ssn}`
    }
  },
  watch: {
    outstanding: function (val, a, b) {
      this.filterOrders()
    },
    resulted: function (val, a, b) {
      this.filterOrders()
    }
  },
  methods: {
    findOrders () {
      jQuery.get(this.orderUrl).then(response => {
        this.orders = response
        this.requistionColumns = [
          { label: 'Req ID', field: 'requisitionID', width: '30px', filter: true },
          { label: 'Order MRN', field: 'orderMRN', width: '40px', filter: true }
        ]
        this.reqWidth = '30%'
      })
    },
    findRequisitions (pat) {
      jQuery
        .post(this.requisitionUrl, JSON.stringify(pat.data.originalData))
        .then(response => {
          if (response.length) {
            setTimeout(function () {
              var a = jQuery('#patientSearch .q-item-link')
              jQuery(a[0]).click()
            }, 10)
            this.requisitions = response
            for (var i = 0; i < this.requisitions.length; i++) {
              this.requisitions[i].testCodes = ''
              for (var j = 0; j < this.requisitions[i].ordersList.length; j++) {
                this.requisitions[i].testCodes += this.requisitions[i].ordersList[j].pmsTestCode + ', '
              }
              this.requisitions[i].testCodes = this.requisitions[i].testCodes.slice(0, -2)
              this.requisitions[i].label = '<div class="row no-wrap"><div class="col-2">' + this.requisitions[i].requisitionID + '</div><div class="col-3"><i class="material-icons text-positive" style="font-size: 18px">arrow_downward</i>' + new Date(this.requisitions[i].pmsRequisitionDate).toLocaleDateString() + ' <i class="material-icons text-positive" style="font-size: 18px">arrow_upward</i>' + (this.requisitions[i].received ? new Date(this.requisitions[i].received).toLocaleDateString() : 'N/A') + '</div><div class="col-2"><i class="fa fa-user-md text-positive" style="font-size: 18px"></i>' + this.requisitions[i].pmsProviderGivenName + ' ' + this.requisitions[i].pmsProviderFamilyName + '</div><div class="col-1"><i class="fa fa-' + (this.requisitions[i].orderDomain === 'LAB' ? 'building-o' : 'hospital-o') + ' text-positive" style="font-size: 24px"></i></div><div class="col-4"><i class="fa fa-stethoscope text-positive" style="font-size: 18px"></i>' + this.requisitions[i].testCodes + '</div></div>'
            }
            this.orders = []
            this.reqWidth = '100%'
            this.requistionColumns = [
              { label: 'Req ID', field: 'requisitionID', width: '30px', filter: true },
              { label: 'Status', field: 'status', width: '50px', filter: true },
              { label: 'Ordering Provider', field: 'pmsProviderID', width: '70px', filter: true },
              { label: 'Order Date', field: 'pmsRequisitionDate', width: '40px', type: 'string', sort (a, b) { return (new Date(a)) - (new Date(b)) }, format (value, row) { return (new Date(value)).toLocaleDateString() } },
              { label: 'TBD Date', field: 'received', width: '40px', type: 'string', sort (a, b) { return (new Date(a)) - (new Date(b)) }, format (value, row) { return (new Date(value)).toLocaleDateString() } },
              { label: 'Type', field: 'orderDomain', width: '25px', filter: true },
              { label: 'Order MRN', field: 'orderMRN', width: '40px', filter: true }
            ]
          }
          else {
            Toast.create['info']({
              html: 'No orders found for ' + this.selectedPatientData.firstName + ' ' + this.selectedPatientData.lastName
            })
            this.requisitions = []
            this.orders = []
          }
        })
    },
    findPatients () {
      if (this.$v.form.$invalid) {
        Alert.create({
          html: 'Validation error! Please review fields again.',
          enter: 'bounceInRight',
          leave: 'bounceOutRight',
          position: 'top',
          duration: 2000,
          dismissible: true
        })
        return
      }
      var thisVue = this
      thisVue.patients = []
      var obj = {}
      obj.name = this.form.name
      obj.dateOfBirth = this.form.dob ? new Date(this.form.dob).toLocaleDateString() : ''
      obj.phone = this.form.phone
      obj.ssn = this.form.ssn
      jQuery
        .post(this.patientUrl, JSON.stringify(obj))
        .then(response => {
          for (var i = 0; i < response.length; i++) {
            var p = {
              matchScore: response[i].matchScore
            }
            for (var propertyName in response[i].attributes) {
              p[propertyName] = response[i].attributes[propertyName][0]
            }
            if (response[i].attributes['phoneNumber'] && response[i].attributes['phoneNumber'].length > 1) {
              p['mobileNumber'] = response[i].attributes['phoneNumber'][1]
            }
            p.originalData = response[i]
            for (var col in thisVue.patientColumns) {
              if (!p[thisVue.patientColumns[col].field]) {
                p[thisVue.patientColumns[col].field] = 'N/A'
              }
            }
            thisVue.patients.push(p)
          }
          thisVue.requisitions = []
          thisVue.orders = []
          thisVue.$refs.bar.stop()
          
          Toast.create['info']({
            html: response.length + ' patients found for ' + this.form.name + (this.form.phone ? ', ' + this.form.phone : '') + (this.form.ssn ? ', ' + this.form.ssn : '') + (this.form.mrn ? ', ' + this.form.mrn : '') + (this.form.dob ? ', ' + new Date(this.form.dob).toLocaleDateString() : '')
          })
        }).fail(response => {
          Alert.create({
            html: 'No patients returned.',
            enter: 'bounceInRight',
            leave: 'bounceOutRight',
            position: 'top',
            duration: 2000,
            dismissible: true
          })
        })
    },
    selectPatient (val, rows) {
      if (val > 0) {
        this.selectedPatientData = rows[0].data
        this.selectedPatientData.fullName = this.selectedPatientData.lastName + ', ' + this.selectedPatientData.firstName
        this.selectedPatientData.markup = '<div class="row no-wrap"><div class="col-3">' + this.selectedPatientData.lastName + ', ' + this.selectedPatientData.firstName + '</div><div class="col-2">' + (this.selectedPatientData.gender === 'F' ? 'Female' : 'Male') + '</div><div class="col-3">' + (this.selectedPatientData.birthDate !== 'N/A' ? this.selectedPatientData.birthDate : 'DOB N/A') + '</div><div class="col-3">MRN</div></div>'
        this.findRequisitions(rows[0])
      }
      else {
        this.selectedPatientData = {}
        this.requisitions = []
        this.orders = []
      }
    },
    selectRequisitions (val, rows) {
      this.orders = []
      // this.previouslySearchedUnfilteredOrders = []
      if (val > 0) {
        for (var k = 0; k < rows.length; k++) {
          for (var l = 0; l < rows[k].data.ordersList.length; l++) {
            rows[k].data.ordersList[l].requisitionID = rows[k].data.requisitionID
            this.orders.push(rows[k].data.ordersList[l])
          }
          // this.previouslySearchedUnfilteredOrders = this.orders
          this.filterOrders()
        }
        if (this.orders.length > 0) {
          this.requistionColumns = [
            { label: 'Req ID', field: 'requisitionID', width: '50px', filter: true },
            { label: 'Order MRN', field: 'orderMRN', width: '30px', filter: true }
          ]
          this.reqWidth = '30%'
        }
      }
      else {
        this.reqWidth = '100%'
        this.requistionColumns = [
          { label: 'Req ID', field: 'requisitionID', width: '30px', filter: true },
          { label: 'Status', field: 'status', width: '50px', filter: true },
          { label: 'Ordering Provider', field: 'pmsProviderID', width: '70px', filter: true },
          { label: 'Order Date', field: 'pmsRequisitionDate', width: '40px', type: 'string', sort (a, b) { return (new Date(a)) - (new Date(b)) }, format (value, row) { return (new Date(value)).toLocaleDateString() } },
          { label: 'TBD Date', field: 'received', width: '40px', type: 'string', sort (a, b) { return (new Date(a)) - (new Date(b)) }, format (value, row) { return (new Date(value)).toLocaleDateString() } },
          { label: 'Type', field: 'orderDomain', width: '25px', filter: true },
          { label: 'Order MRN', field: 'orderMRN', width: '40px', filter: true }
        ]
      }
    },
    selectOrders (val, rows) {
      this.selectedOrderDataArray = rows
    },
    release () {
      window.alert('Release ' + this.selectedOrderDataArray.length + ' orders.')
    },
    searchByOrders () {
      this.patients = []
    },
    filterOrders: function () {
      var values = []
      if (this.outstanding) {
        values.push('OUTSTANDING')
      }
      if (this.resulted) {
        values.push('RESULTED')
      }
      var oOrders = jQuery.grep(this.previouslySearchedUnfilteredOrders, function (o) {
        return values.includes(o.orderStatus)
      })
      this.orders = oOrders
    },
    openRequisition (a) {
      var thisVue = this
      setTimeout(
        function () {
          thisVue.selectAllIn(a)
        },
        1000
      )
    },
    selectAllIn (reqElementId) {
      jQuery('#' + reqElementId).find('.q-checkbox').click()
    },
    closeRequisition (a) {
      var thisVue = this
      setTimeout(
        function () {
          thisVue.unSelectAllIn(a)
        },
        10
      )
    },
    unSelectAllIn (reqElementId) {
      var chkbxs = jQuery('#' + reqElementId + ' .q-table').find('input[type="checkbox"]')
      for (var i = 0; i < chkbxs.length; i++) {
        if (jQuery(chkbxs[i]).is(':checked')) {
          jQuery(chkbxs[i]).parent().click()
        }
      }
    },
    clear (form) {
      for (var property in form) {
        form[property] = ''
      }
      this.patients = []
      this.requisitions = []
      this.selectedPatientData = {}
    }
  },
  mounted () {
  },
  beforeDestroy () {
  }
}
</script>

<style>
.q-input-target {
  color: #797979;
}
.stickToLeft {
  float: left;
}
.stickToRight {
  float: right;
}
#tblPatients {
}
.q-select .q-if-control {
  margin-top: 17px;
}
.col-2 .q-btn {
  margin: 10px 0;
}
.customlegend {
  float: right;
  margin: 5px;
  font-size: 11px;
}
.material-icons, .fa {
  color: gray !important;
}
.fa {
  margin-right: 4px;
}
.table-custom-title {
  padding: 8px;
  font-weight: bold;
}
.q-collapsible {
  background: #eaeaea;
}
.q-collapsible-sub-item {
  background: white;
}
.no-wrap {
  white-space: nowrap;
}
.upper-toolbar {
  display: none;
}
.customPaddingForDiv {
  padding: 15px 0px;
}
_:-ms-fullscreen, :root .q-btn-rectangle{
  min-width: 110px;
  padding: 6px;
}
_:-ms-fullscreen, :root .q-toast-message{
  min-width: 300px;
}
.items-right {
  tdisplay: flex;
  justify-content: flex-end
}
.floatover {
  float: right;
  margin: -38px 18px;
}
.q-item:hover, .q-item:focus {
  background: none !important;
}


<!--/*TO HIDE THE COLUMN SELECTION TOOLBAR OF DATATABLE*/
.upper-toolbar {
  display: none;
}-->
<!--.col-2 .q-btn {
  margin: 10px 0;
}-->
<!--.material-icons {
  color: #6d6d6d !important;
}-->
<!--.fa {
  color: #6d6d6d;
}-->
<!--.requisitionContainer .fa {
  margin: 3px;
}-->
<!--.row > .col-2 {
  padding: 0px 5px;
}-->


.fixedRow {
  position: fixed;
  top: 120px;
  background: white;
  z-index: 1;
  padding-right: 65px;
  margin-left: -16px;
}
.fixedPatientRow {
  position: fixed;
  top: 20px;
  z-index: 2;
  width: 100%;
  background: white;
  
}
</style>


